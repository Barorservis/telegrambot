import logging
import os
import requests
import matplotlib.pyplot as plt
from telegram import ReplyKeyboardMarkup, KeyboardButton, Update
from telegram.ext import (Updater, CommandHandler, MessageHandler, Filters, CallbackContext)
from datetime import datetime

TOKEN = os.getenv("BOT_TOKEN")
BOT_NAME = os.getenv("BOT_NAME")

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

coins = ['BTC', 'ETH', 'SOL', 'AVAX', 'ADA', 'BNB', 'LTC', 'XRP', 'NOT', 'DOGE']

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã —Å CoinGecko
def get_price(symbol):
    try:
        ids = {
            'BTC': 'bitcoin', 'ETH': 'ethereum', 'SOL': 'solana', 'AVAX': 'avalanche-2',
            'ADA': 'cardano', 'BNB': 'binancecoin', 'LTC': 'litecoin',
            'XRP': 'ripple', 'NOT': 'notcoin', 'DOGE': 'dogecoin'
        }
        url = f"https://api.coingecko.com/api/v3/simple/price?ids={ids[symbol]}&vs_currencies=usd"
        response = requests.get(url)
        if response.status_code != 200:
            return "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ CoinGecko"
        response = response.json()
        if ids[symbol] not in response or 'usd' not in response[ids[symbol]]:
            return "–î–∞–Ω–Ω—ã–µ –ø–æ –º–æ–Ω–µ—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        return response[ids[symbol]]['usd']
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã: {e}"

def welcome_text(first_name="—Ç—Ä–µ–π–¥–µ—Ä"):
    fake_count = 1523  # –ó–∞–≥–ª—É—à–∫–∞, –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –ø–æ –∂–µ–ª–∞–Ω–∏—é
    return (
        f"–ü—Ä–∏–≤–µ—Ç, {first_name}! üëã\n"
        f"TradingZone –ë–æ—Ç–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç {fake_count} —á–µ–ª–æ–≤–µ–∫(–∞)\n"
        "–≠—Ç–æ—Ç Telegram-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–æ–¥–∏—Ç —Ä–µ–∞–ª—å–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø–æ 10 —Ç–æ–ø-–∞–ª—å—Ç–∞–º –∏ —Ç–∞–∫–∂–µ –¥–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑—ã: Short –∏ Long —Å —Ç–æ—á–∫–æ–π –≤—Ö–æ–¥–∞!\n"
        "[–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –Ω–∞—à–µ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É](https://t.me/tradingzone13)"
    )

def start(update: Update, context: CallbackContext):
    first_name = update.effective_user.first_name or "—Ç—Ä–µ–π–¥–µ—Ä"
    update.message.reply_text(welcome_text(first_name), parse_mode='Markdown')
    keyboard = [
        [KeyboardButton("–ê–Ω–∞–ª–∏–∑")],
        [KeyboardButton("üìà –ì—Ä–∞—Ñ–∏–∫–∞")],
        [KeyboardButton("üìâ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —à–æ—Ä—Ç")],
        [KeyboardButton("üìà –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –ª–æ–Ω–≥")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    update.message.reply_text("üìç –í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:", reply_markup=reply_markup)

def coin_menu(update: Update, context: CallbackContext, action):
    keyboard = [[KeyboardButton(coin)] for coin in coins]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    update.message.reply_text("–í—ã–±–µ—Ä–∏ –º–æ–Ω–µ—Ç—É:", reply_markup=reply_markup)
    context.user_data['action'] = action

def handle_message(update: Update, context: CallbackContext):
    text = update.message.text
    action = context.user_data.get('action')

    if text in ["–ê–Ω–∞–ª–∏–∑", "üìà –ì—Ä–∞—Ñ–∏–∫–∞", "üìâ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —à–æ—Ä—Ç", "üìà –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –ª–æ–Ω–≥"]:
        if "–ê–Ω–∞–ª–∏–∑" in text:
            coin_menu(update, context, 'analyze')
        elif "—à–æ—Ä—Ç" in text:
            coin_menu(update, context, 'short')
        elif "–ª–æ–Ω–≥" in text:
            coin_menu(update, context, 'long')
        elif "–ì—Ä–∞—Ñ–∏–∫–∞" in text:
            coin_menu(update, context, 'chart')
    elif text in coins:
        price = get_price(text)
        if isinstance(price, str):
            update.message.reply_text(price)
            return

        if action == 'analyze':
            update.message.reply_text(f"üìä –ê–Ω–∞–ª–∏–∑ {text}\n–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${price}")
        elif action == 'short':
            update.message.reply_text(f"üîª –®–æ—Ä—Ç {text}\n–¶–µ–Ω–∞: ${price}\n–ü—Ä–∏—á–∏–Ω–∞: –¶–µ–Ω–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è.")
        elif action == 'long':
            update.message.reply_text(f"üìà –õ–æ–Ω–≥ {text}\n–¶–µ–Ω–∞: ${price}\n–ü—Ä–∏—á–∏–Ω–∞: –¶–µ–Ω–∞ –ø—Ä–æ–±–∏–≤–∞–µ—Ç —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö.")
        elif action == 'chart':
            update.message.reply_text(f"üìâ –ì—Ä–∞—Ñ–∏–∫ {text}\n–¶–µ–Ω–∞ —Å–µ–π—á–∞—Å: ${price}\n(–≤ –±—É–¥—É—â–µ–º –¥–æ–±–∞–≤–∏–º –∫–∞—Ä—Ç–∏–Ω–∫—É)")

def main():
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
