import os
import threading
from flask import Flask
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
import requests
import statistics
import matplotlib.pyplot as plt
import io
import datetime
import matplotlib

matplotlib.use('Agg')  # –ß—Ç–æ–± –Ω–µ —Ç—Ä–µ–±–æ–≤–∞—Ç—å GUI –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏

TOKEN = "8107581760:AAFfGWDdZsA9Npn2oNLQB-OgMNHbeIxfAKI"
CMC_API_KEY = "1bda7385-c9e8-4119-a1aa-1d89aabb96a2"
BASE_URL = "https://api.binance.com/api/v3"

FAKE_USERS_FILE = "fake_users.txt"

app = Flask(__name__)

@app.route('/')
def index():
    return "Bot is running!"

def load_fake_users():
    if os.path.exists(FAKE_USERS_FILE):
        with open(FAKE_USERS_FILE, "r") as f:
            return int(f.read())
    return 9000

def save_fake_users(count):
    with open(FAKE_USERS_FILE, "w") as f:
        f.write(str(count))

def get_cmc_data(symbol):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –º–æ–Ω–µ—Ç–∞—Ö –Ω–∞ CoinMarketCap
    –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–∞–º–∏:
    price, market_cap, volume_24h, percent_change_24h
    –∏–ª–∏ None, –µ—Å–ª–∏ –º–æ–Ω–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ / –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.
    """
    url = "https://pro-api.coinmarketcap.com/v1/cryptocurrency/listings/latest"
    headers = {"X-CMC_PRO_API_KEY": CMC_API_KEY}
    params = {"start": "1", "limit": "200", "convert": "USD"}
    try:
        response = requests.get(url, headers=headers, params=params)
        data = response.json()["data"]
        for coin in data:
            if coin["symbol"].upper() == symbol.upper():
                return {
                    "price": coin["quote"]["USD"]["price"],
                    "market_cap": coin["quote"]["USD"]["market_cap"],
                    "volume_24h": coin["quote"]["USD"]["volume_24h"],
                    "percent_change_24h": coin["quote"]["USD"]["percent_change_24h"]
                }
    except Exception as e:
        print(f"CMC Error: {e}", flush=True)
    return None

def get_klines(symbol, interval='1h', limit=50):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π –Ω–∞ Binance.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ klines –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ.
    """
    url = f"{BASE_URL}/klines?symbol={symbol}&interval={interval}&limit={limit}"
    try:
        response = requests.get(url)
        data = response.json()
        if isinstance(data, dict) and data.get("code"):
            # Binance –≤–µ—Ä–Ω—É–ª–∞ –æ—à–∏–±–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä { "code": -1121, "msg": "Invalid symbol." }
            raise ValueError(f"Binance error: {data}")
        return data
    except Exception as e:
        print(f"Binance API error: {e}", flush=True)
        return None

def calculate_rsi(closes, period=14):
    """
    –†–∞—Å—á—ë—Ç RSI (14) –ø–æ –∑–∞–∫—Ä—ã—Ç–∏—è–º —Å–≤–µ—á–µ–π.
    –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–Ω—å—à–µ, —á–µ–º period+1, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0.
    """
    if len(closes) < period + 1:
        return 0
    deltas = [closes[i+1] - closes[i] for i in range(len(closes)-1)]
    gains = [delta for delta in deltas if delta > 0]
    losses = [-delta for delta in deltas if delta < 0]
    avg_gain = sum(gains[-period:]) / period if gains else 0.0001
    avg_loss = sum(losses[-period:]) / period if losses else 0.0001
    rs = avg_gain / avg_loss
    return 100 - (100 / (1 + rs))

def show_main_menu(update: Update, context: CallbackContext):
    user = update.effective_user
    first_name = user.first_name or "–¥—Ä—É–≥"
    fake_count = load_fake_users() + 1
    save_fake_users(fake_count)

    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {first_name}! üëã\n"
        f"TradingZone –ë–æ—Ç–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç {fake_count} —á–µ–ª–æ–≤–µ–∫(–∞)\n"
        "–≠—Ç–æ—Ç Telegram-–±–æ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç —Ä–µ–∞–ª—å–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∏ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ª—é–±–æ–π –∫—Ä–∏–ø—Ç–æ–º–æ–Ω–µ—Ç—ã!\n"
        "[–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –Ω–∞—à–µ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É](https://t.me/tradingzone13)"
    )

    keyboard = ReplyKeyboardMarkup([
        [KeyboardButton("üìä –ê–Ω–∞–ª–∏–∑"), KeyboardButton("üìà –ì—Ä–∞—Ñ–∏–∫–∞")]
    ], resize_keyboard=True)

    context.bot.send_message(chat_id=update.effective_chat.id, text=welcome_text, parse_mode="Markdown")
    context.bot.send_message(chat_id=update.effective_chat.id, text="üìç –í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:", reply_markup=keyboard)

def handle_text(update: Update, context: CallbackContext):
    text = update.message.text.upper()
    mode = context.user_data.get('mode')

    if text in ["üìä –ê–ù–ê–õ–ò–ó", "üìà –ì–†–ê–§–ò–ö–ê"]:
        context.user_data['mode'] = text
        update.message.reply_text("–í–≤–µ–¥–∏ —Ç–∏–∫–µ—Ä –º–æ–Ω–µ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTC, ETH, DOGE):")
    elif mode in ["üìä –ê–ù–ê–õ–ò–ó", "üìà –ì–†–ê–§–ò–ö–ê"]:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫ —Ç–∏–∫–µ—Ä—É 'USDT', —á—Ç–æ–±—ã –∏—Å–∫–∞—Ç—å –º–æ–Ω–µ—Ç—É –Ω–∞ Binance
        symbol = f"{text}USDT"

        if mode == "üìä –ê–ù–ê–õ–ò–ó":
            try:
                # 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å CoinMarketCap
                cmc_data = get_cmc_data(text)
                if cmc_data is None:
                    update.message.reply_text("–î–∞–Ω–Ω—ã–µ –ø–æ –º–æ–Ω–µ—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ CoinMarketCap.")
                    return

                # 2. –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ —Å Binance
                klines = get_klines(symbol)
                if not klines or len(klines) == 0:
                    update.message.reply_text("–ú–æ–Ω–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ Binance.")
                    return

                closes = [float(k[4]) for k in klines]
                volumes = [float(k[5]) for k in klines]

                # –î–ª—è MA(50) –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 50 –∑–Ω–∞—á–µ–Ω–∏–π
                if len(closes) < 50:
                    update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ MA(50).")
                    return

                price = closes[-1]
                ma50 = statistics.mean(closes[-50:])
                rsi = calculate_rsi(closes)
                volume_24h = sum(volumes[-24:])

                # –î–ª—è —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –±–µ—Ä—ë–º –º–∞–∫—Å–∏–º—É–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–≤–µ—á–µ–π
                if len(closes) < 10:
                    resistance = price
                else:
                    resistance = max(closes[-10:])

                volume_str = f"{volume_24h/1_000_000_000:.2f}B" if volume_24h >= 1e9 else f"{volume_24h/1_000_000:.2f}M"

                # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ RSI
                rsi_comment = "(–Ω–æ—Ä–º–∞)"
                if rsi > 70:
                    rsi_comment = "(–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω, –≤–æ–∑–º–æ–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –≤–Ω–∏–∑)"
                elif rsi < 30:
                    rsi_comment = "(–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω, –≤–æ–∑–º–æ–∂–µ–Ω –æ—Ç—Å–∫–æ–∫ –≤–≤–µ—Ä—Ö)"

                # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ MA(50)
                ma_comment = "(—Ñ–ª—ç—Ç)"
                if price > ma50:
                    ma_comment = "(–≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥)"
                elif price < ma50:
                    ma_comment = "(–Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥)"

                response = (
                    f"üìä *–ê–Ω–∞–ª–∏–∑ {text} (CoinMarketCap)*\n"
                    f"\n‚ùñ –¶–µ–Ω–∞: *${cmc_data['price']:.6f}*"
                    f"\n‚ùñ –†—ã–Ω–æ—á–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: *${cmc_data['market_cap'] / 1e9:.2f}B*"
                    f"\n‚ùñ –û–±—ä—ë–º –∑–∞ 24—á: *${cmc_data['volume_24h'] / 1e6:.2f}M*"
                    f"\n‚ùñ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á: *{cmc_data['percent_change_24h']:.2f}%*"
                    f"\n\nüìà *–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ (Binance)*\n"
                    f"\n‚ùñ RSI (14): *{rsi:.2f}* {rsi_comment}"
                    f"\n‚ùñ MA(50): *{ma50:.6f}* {ma_comment}"
                    f"\n‚ùñ –û–±—ä—ë–º –∑–∞ 24—á: *{volume_str}*"
                    f"\n‚ùñ –ó–æ–Ω–∞ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è: ~*{resistance:.6f}*"
                    f"\n\n_–≠—Ç–æ –ª–∏—à—å –±–∞–∑–æ–≤—ã–π –æ–±–∑–æ—Ä. –î–ª—è –ø–æ–ª–Ω–æ—Ç—ã –∫–∞—Ä—Ç–∏–Ω—ã —É—á–∏—Ç—ã–≤–∞–π—Ç–µ —Å–≤–æ–∏ —Ü–µ–ª–∏ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é._"
                )

                update.message.reply_text(response, parse_mode="Markdown")

            except Exception as e:
                # –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –∏ –≤ –ª–æ–≥, –∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
                print(f"–ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∞: {e}", flush=True)
                update.message.reply_text(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}\n–í–æ–∑–º–æ–∂–Ω–æ, –º–æ–Ω–µ—Ç–∞ –Ω–µ —Ç–æ—Ä–≥—É–µ—Ç—Å—è –Ω–∞ Binance.")

        elif mode == "üìà –ì–†–ê–§–ò–ö–ê":
            try:
                klines = get_klines(symbol, interval='30m', limit=48)
                if not klines or len(klines) == 0:
                    update.message.reply_text("–ú–æ–Ω–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ Binance (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞).")
                    return

                times = [datetime.datetime.fromtimestamp(k[0]/1000) for k in klines]
                closes = [float(k[4]) for k in klines]

                plt.figure(figsize=(10, 4))
                plt.plot(times, closes, label=text, color='blue')
                plt.title(f"–ì—Ä–∞—Ñ–∏–∫ {text} –∑–∞ 24—á")
                plt.xlabel("–í—Ä–µ–º—è")
                plt.ylabel("–¶–µ–Ω–∞")
                plt.grid(True)
                plt.tight_layout()

                buf = io.BytesIO()
                plt.savefig(buf, format='png')
                buf.seek(0)
                plt.close()

                context.bot.send_photo(chat_id=update.effective_chat.id, photo=buf)
            except Exception as e:
                print(f"–ì—Ä–∞—Ñ–∏–∫ –æ—à–∏–±–∫–∞: {e}", flush=True)
                update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}. –í–æ–∑–º–æ–∂–Ω–æ, –º–æ–Ω–µ—Ç–∞ –Ω–µ —Ç–æ—Ä–≥—É–µ—Ç—Å—è –Ω–∞ Binance.")
    else:
        update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ ‚¨áÔ∏è")

def run_bot():
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Telegram-–±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling.
    """
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", show_main_menu))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_text))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    bot_thread = threading.Thread(target=run_bot)
    bot_thread.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã Render –Ω–µ —É–±–∏–≤–∞–ª —Å–µ—Ä–≤–∏—Å
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)
