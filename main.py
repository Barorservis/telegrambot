from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
import requests
import statistics
import matplotlib.pyplot as plt
import io
import datetime
import matplotlib
import os

matplotlib.use('Agg')

TOKEN = os.getenv("BOT_TOKEN")
BASE_URL = "https://api.binance.com/api/v3"
TOP_COINS = ["BTCUSDT", "ETHUSDT", "SOLUSDT", "AVAXUSDT", "ADAUSDT", "BNBUSDT", "LTCUSDT", "XRPUSDT", "NOTUSDT", "DOGEUSDT"]

FAKE_USERS_FILE = "fake_users.txt"

def load_fake_users():
    if os.path.exists(FAKE_USERS_FILE):
        with open(FAKE_USERS_FILE, "r") as f:
            return int(f.read())
    return 9000

def save_fake_users(count):
    with open(FAKE_USERS_FILE, "w") as f:
        f.write(str(count))

def show_main_menu(update: Update, context: CallbackContext):
    user = update.effective_user
    first_name = user.first_name or "–¥—Ä—É–≥"

    fake_count = load_fake_users() + 1
    save_fake_users(fake_count)

    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {first_name}! üëã\n"
        f"TradingZone –ë–æ—Ç–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç {fake_count} —á–µ–ª–æ–≤–µ–∫(–∞)\n"
        "–≠—Ç–æ—Ç Telegram-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–æ–¥–∏—Ç —Ä–µ–∞–ª—å–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø–æ 10 —Ç–æ–ø-–∞–ª—å—Ç–∞–º –∏ —Ç–∞–∫–∂–µ –¥–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑—ã: Short –∏ Long —Å —Ç–æ—á–∫–æ–π –≤—Ö–æ–¥–∞!\n"
        "[–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –Ω–∞—à–µ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É](https://t.me/tradingzone13)"
    )

    keyboard = ReplyKeyboardMarkup([
        [KeyboardButton("üìä –ê–Ω–∞–ª–∏–∑"), KeyboardButton("üìà –ì—Ä–∞—Ñ–∏–∫–∞")],
        [KeyboardButton("üü• –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —à–æ—Ä—Ç"), KeyboardButton("üü© –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –ª–æ–Ω–≥")]
    ], resize_keyboard=True)

    context.bot.send_message(chat_id=update.effective_chat.id, text=welcome_text, parse_mode="Markdown")
    context.bot.send_message(chat_id=update.effective_chat.id, text="üìç –í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:", reply_markup=keyboard)

def calculate_rsi(closes, period=14):
    if len(closes) < period + 1:
        return 0
    deltas = [closes[i+1] - closes[i] for i in range(len(closes)-1)]
    gains = [delta for delta in deltas if delta > 0]
    losses = [-delta for delta in deltas if delta < 0]
    avg_gain = sum(gains[-period:]) / period if gains else 0.0001
    avg_loss = sum(losses[-period:]) / period if losses else 0.0001
    rs = avg_gain / avg_loss
    return 100 - (100 / (1 + rs))

def get_klines(symbol, interval='1h', limit=50):
    url = f"{BASE_URL}/klines?symbol={symbol}&interval={interval}&limit={limit}"
    return requests.get(url).json()

def handle_text(update: Update, context: CallbackContext):
    text = update.message.text

    if text in ["üìä –ê–Ω–∞–ª–∏–∑", "üìà –ì—Ä–∞—Ñ–∏–∫–∞", "üü• –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —à–æ—Ä—Ç", "üü© –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –ª–æ–Ω–≥"]:
        context.user_data['mode'] = text
        coin_buttons = [[KeyboardButton(coin[:-4])] for coin in TOP_COINS]
        coin_buttons.append([KeyboardButton("üîô –ù–∞–∑–∞–¥")])
        reply_markup = ReplyKeyboardMarkup(coin_buttons, resize_keyboard=True)
        update.message.reply_text("–í—ã–±–µ—Ä–∏ –º–æ–Ω–µ—Ç—É:", reply_markup=reply_markup)
    elif text == "üîô –ù–∞–∑–∞–¥":
        show_main_menu(update, context)
    elif any(text == coin[:-4] for coin in TOP_COINS):
        symbol = f"{text}USDT"
        mode = context.user_data.get('mode')

        if mode == "üìä –ê–Ω–∞–ª–∏–∑":
            klines = get_klines(symbol)
            closes = [float(k[4]) for k in klines]
            volumes = [float(k[5]) for k in klines]
            price = closes[-1]
            ma50 = statistics.mean(closes[-50:])
            rsi = calculate_rsi(closes)
            volume_24h = sum(volumes[-24:])
            resistance = max(closes[-10:])
            volume_str = f"{volume_24h/1_000_000_000:.2f}B" if volume_24h >= 1e9 else f"{volume_24h/1_000_000:.2f}M"

            rsi_comment = "(–Ω–æ—Ä–º–∞)"
            if rsi > 70:
                rsi_comment = "(–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω, –≤–æ–∑–º–æ–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –≤–Ω–∏–∑)"
            elif rsi < 30:
                rsi_comment = "(–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω, –≤–æ–∑–º–æ–∂–µ–Ω –æ—Ç—Å–∫–æ–∫ –≤–≤–µ—Ä—Ö)"

            ma_comment = "(—Ñ–ª—ç—Ç)"
            if price > ma50:
                ma_comment = "(–≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥)"
            elif price < ma50:
                ma_comment = "(–Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥)"

            text = (
                f"üìä *–ê–Ω–∞–ª–∏–∑ {symbol[:-4]}*\n\n"
                f"‚ùñ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: *${price:.2f}*\n"
                f"‚ùñ RSI (14): *{rsi:.2f}* {rsi_comment}\n"
                f"‚ùñ MA(50): *{ma50:.2f}* {ma_comment}\n"
                f"‚ùñ –û–±—ä—ë–º –∑–∞ 24—á: *{volume_str}*\n"
                f"‚ùñ –ó–æ–Ω–∞ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è: ~*{resistance:.2f}*\n\n"
                f"_–≠—Ç–æ –ª–∏—à—å –±–∞–∑–æ–≤—ã–π –æ–±–∑–æ—Ä. –î–ª—è –ø–æ–ª–Ω–æ—Ç—ã –∫–∞—Ä—Ç–∏–Ω—ã —É—á–∏—Ç—ã–≤–∞–π—Ç–µ —Å–≤–æ–∏ —Ü–µ–ª–∏ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é._"
            )
            update.message.reply_text(text, parse_mode="Markdown")

        elif mode == "üìà –ì—Ä–∞—Ñ–∏–∫–∞":
            klines = get_klines(symbol, interval='30m', limit=48)
            times = [datetime.datetime.fromtimestamp(k[0]/1000) for k in klines]
            closes = [float(k[4]) for k in klines]

            plt.figure(figsize=(10, 4))
            plt.plot(times, closes, label=symbol[:-4], color='blue')
            plt.title(f"–ì—Ä–∞—Ñ–∏–∫ {symbol[:-4]} –∑–∞ 24—á")
            plt.xlabel("–í—Ä–µ–º—è")
            plt.ylabel("–¶–µ–Ω–∞")
            plt.grid(True)
            plt.tight_layout()

            buf = io.BytesIO()
            plt.savefig(buf, format='png')
            buf.seek(0)
            plt.close()

            context.bot.send_photo(chat_id=update.effective_chat.id, photo=buf)

        elif mode == "üü• –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —à–æ—Ä—Ç":
            price = float(get_klines(symbol)[-1][4])
            entry = price * 0.98
            tp = price * 0.95
            sl = price * 1.01
            ma50 = statistics.mean([float(k[4]) for k in get_klines(symbol)])
            rsi = calculate_rsi([float(k[4]) for k in get_klines(symbol)])
            reason = f"RSI: {rsi:.1f}, MA50: {ma50:.2f}, –≤–æ–∑–º–æ–∂–Ω—ã–π –æ—Ç–∫–∞—Ç –æ—Ç –∑–æ–Ω—ã —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è."

            text = (
                f"üìâ *–®–æ—Ä—Ç —Å–∏–≥–Ω–∞–ª –ø–æ {symbol[:-4]}*\n\n"
                f"‚ùñ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: *${price:.2f}*\n"
                f"‚ùñ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞: ~*${entry:.2f}*\n"
                f"‚ùñ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: ~*${tp:.2f}*\n"
                f"‚ùñ –°—Ç–æ–ø-–ª–æ—Å—Å: ~*${sl:.2f}*\n"
                f"‚ùñ –ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
                f"_–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ —Ä–∏—Å–∫–∏ –∏ —É—á–∏—Ç—ã–≤–∞–µ—Ç–µ —Å–≤–æ—é —Ç–æ—Ä–≥–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é._"
            )
            update.message.reply_text(text, parse_mode="Markdown")

        elif mode == "üü© –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –ª–æ–Ω–≥":
            price = float(get_klines(symbol)[-1][4])
            entry = price * 1.01
            tp = price * 1.05
            sl = price * 0.97
            ma50 = statistics.mean([float(k[4]) for k in get_klines(symbol)])
            rsi = calculate_rsi([float(k[4]) for k in get_klines(symbol)])
            reason = f"RSI: {rsi:.1f}, MA50: {ma50:.2f}, –≤–æ–∑–º–æ–∂–Ω—ã–π –ø—Ä–æ–±–æ–π –≤–≤–µ—Ä—Ö."

            text = (
                f"üìà *–õ–æ–Ω–≥ —Å–∏–≥–Ω–∞–ª –ø–æ {symbol[:-4]}*\n\n"
                f"‚ùñ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: *${price:.2f}*\n"
                f"‚ùñ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞: ~*${entry:.2f}*\n"
                f"‚ùñ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: ~*${tp:.2f}*\n"
                f"‚ùñ –°—Ç–æ–ø-–ª–æ—Å—Å: ~*${sl:.2f}*\n"
                f"‚ùñ –ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
                f"_–í—Å–µ–≥–¥–∞ –ø–æ–º–Ω–∏—Ç–µ –æ —Ä–∏—Å–∫–∞—Ö –∏ –ø—Ä–æ–≤–æ–¥–∏—Ç–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑._"
            )
            update.message.reply_text(text, parse_mode="Markdown")
        else:
            update.message.reply_text("–ù–µ–ø–æ–Ω—è—Ç–Ω—ã–π —Ä–µ–∂–∏–º. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.")
    else:
        update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ ‚¨áÔ∏è")

def main():
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", show_main_menu))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_text))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
