from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
import requests
import statistics
import matplotlib.pyplot as plt
import io
import datetime
import matplotlib
import os

matplotlib.use('Agg')

TOKEN = os.getenv("BOT_TOKEN")
CMC_API_KEY = "1bda7385-c9e8-4119-a1aa-1d89aabb96a2"
BASE_URL = "https://api.binance.com/api/v3"
TOP_COINS = ["BTCUSDT", "ETHUSDT", "SOLUSDT", "AVAXUSDT", "ADAUSDT", "BNBUSDT", "LTCUSDT", "XRPUSDT", "NOTUSDT", "DOGEUSDT"]

FAKE_USERS_FILE = "fake_users.txt"

def load_fake_users():
    if os.path.exists(FAKE_USERS_FILE):
        with open(FAKE_USERS_FILE, "r") as f:
            return int(f.read())
    return 9000

def save_fake_users(count):
    with open(FAKE_USERS_FILE, "w") as f:
        f.write(str(count))

def get_cmc_data(symbol):
    url = "https://pro-api.coinmarketcap.com/v1/cryptocurrency/listings/latest"
    headers = {"X-CMC_PRO_API_KEY": CMC_API_KEY}
    params = {"start": "1", "limit": "100", "convert": "USD"}
    try:
        response = requests.get(url, headers=headers, params=params)
        data = response.json()["data"]
        for coin in data:
            if coin["symbol"].upper() == symbol.upper():
                return {
                    "price": coin["quote"]["USD"]["price"],
                    "market_cap": coin["quote"]["USD"]["market_cap"],
                    "volume_24h": coin["quote"]["USD"]["volume_24h"],
                    "percent_change_24h": coin["quote"]["USD"]["percent_change_24h"]
                }
    except Exception as e:
        print(f"CMC Error: {e}")
    return None

def show_main_menu(update: Update, context: CallbackContext):
    user = update.effective_user
    first_name = user.first_name or "–¥—Ä—É–≥"

    fake_count = load_fake_users() + 1
    save_fake_users(fake_count)

    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {first_name}! üëã\n"
        f"TradingZone –ë–æ—Ç–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç {fake_count} —á–µ–ª–æ–≤–µ–∫(–∞)\n"
        "–≠—Ç–æ—Ç Telegram-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–æ–¥–∏—Ç —Ä–µ–∞–ª—å–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø–æ 10 —Ç–æ–ø-–∞–ª—å—Ç–∞–º –∏ —Ç–∞–∫–∂–µ –¥–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑—ã: Short –∏ Long —Å —Ç–æ—á–∫–æ–π –≤—Ö–æ–¥–∞!\n"
        "[–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –Ω–∞—à–µ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É](https://t.me/tradingzone13)"
    )

    keyboard = ReplyKeyboardMarkup([
        [KeyboardButton("üìä –ê–Ω–∞–ª–∏–∑"), KeyboardButton("üìà –ì—Ä–∞—Ñ–∏–∫–∞")]
    ], resize_keyboard=True)

    context.bot.send_message(chat_id=update.effective_chat.id, text=welcome_text, parse_mode="Markdown")
    context.bot.send_message(chat_id=update.effective_chat.id, text="üìç –í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:", reply_markup=keyboard)

# –û—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å –∫–æ–¥–∞ –æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —à–æ—Ä—Ç–æ–≤ –∏ –ª–æ–Ω–≥–æ–≤ –ø—Ä–æ—Å—Ç–æ –±–æ–ª—å—à–µ –Ω–µ –≤—ã–∑—ã–≤–∞—é—Ç—Å—è.

# ... (–≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ –∫–∞–∫ –µ—Å—Ç—å)

def main():
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", show_main_menu))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_text))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
